// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package appconfig

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppconfigClient is the client API for Appconfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppconfigClient interface {
	//新服务
	GetConfigValue(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*BaseResponse, error)
	//旧服务
	GetAppConfig(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error)
}

type appconfigClient struct {
	cc grpc.ClientConnInterface
}

func NewAppconfigClient(cc grpc.ClientConnInterface) AppconfigClient {
	return &appconfigClient{cc}
}

func (c *appconfigClient) GetConfigValue(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/appconfig.Appconfig/GetConfigValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appconfigClient) GetAppConfig(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/appconfig.Appconfig/GetAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppconfigServer is the server API for Appconfig service.
// All implementations should embed UnimplementedAppconfigServer
// for forward compatibility
type AppconfigServer interface {
	//新服务
	GetConfigValue(context.Context, *ConfigRequest) (*BaseResponse, error)
	//旧服务
	GetAppConfig(context.Context, *Params) (*Result, error)
}

// UnimplementedAppconfigServer should be embedded to have forward compatible implementations.
type UnimplementedAppconfigServer struct {
}

func (UnimplementedAppconfigServer) GetConfigValue(context.Context, *ConfigRequest) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigValue not implemented")
}
func (UnimplementedAppconfigServer) GetAppConfig(context.Context, *Params) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppConfig not implemented")
}

// UnsafeAppconfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppconfigServer will
// result in compilation errors.
type UnsafeAppconfigServer interface {
	mustEmbedUnimplementedAppconfigServer()
}

func RegisterAppconfigServer(s grpc.ServiceRegistrar, srv AppconfigServer) {
	s.RegisterService(&Appconfig_ServiceDesc, srv)
}

func _Appconfig_GetConfigValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppconfigServer).GetConfigValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appconfig.Appconfig/GetConfigValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppconfigServer).GetConfigValue(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Appconfig_GetAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppconfigServer).GetAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appconfig.Appconfig/GetAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppconfigServer).GetAppConfig(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

// Appconfig_ServiceDesc is the grpc.ServiceDesc for Appconfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Appconfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appconfig.Appconfig",
	HandlerType: (*AppconfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfigValue",
			Handler:    _Appconfig_GetConfigValue_Handler,
		},
		{
			MethodName: "GetAppConfig",
			Handler:    _Appconfig_GetAppConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/appconfig.proto",
}
